---
title: "Biostat 203B Homework 2"
subtitle: Due Feb 7, 2025 @ 11:59PM
author: "Khoa Vu UID: 705600710"
format:
  html:
    theme: cosmo
    embed-resources: true
    number-sections: false
    toc: true
    toc-depth: 4
    toc-location: left
    code-fold: false
    link-external-icon: true
    link-external-newwindow: true
---

Display machine information for reproducibility:

```{r}
sessionInfo()
```

Load necessary libraries (you can add more as needed).

```{r setup}
library(arrow)
library(data.table)
library(duckdb)
library(memuse)
library(pryr)
library(R.utils)
library(tidyverse)
```

Display memory information of your computer

```{r}
memuse::Sys.meminfo()
```

In this exercise, we explore various tools for ingesting the [MIMIC-IV](https://physionet.org/content/mimiciv/3.1/) data introduced in [homework 1](https://ucla-biostat-203b.github.io/2025winter/hw/hw1/hw1.html).

Display the contents of MIMIC `hosp` and `icu` data folders:

```{bash}
ls -l ~/mimic/hosp/
```

```{bash}
ls -l ~/mimic/icu/
```

## Q1. `read.csv` (base R) vs `read_csv` (tidyverse) vs `fread` (data.table)

### Q1.1 Speed, memory, and data types

There are quite a few utilities in R for reading plain text data files. Let us test the speed of reading a moderate sized compressed csv file, `admissions.csv.gz`, by three functions: `read.csv` in base R, `read_csv` in tidyverse, and `fread` in the data.table package.

Which function is fastest? Is there difference in the (default) parsed data types? How much memory does each resultant dataframe or tibble use? (Hint: `system.time` measures run times; `pryr::object_size` measures memory usage; all these readers can take gz file as input without explicit decompression.)

**Solution:**

Testing the speed of `read.csv`:

```{R}
system.time(read.csv("~/mimic/hosp/admissions.csv.gz"))
pryr::object_size(read.csv("~/mimic/hosp/admissions.csv.gz"))
```

Testing the speed of `read_csv`:

```{R}
system.time(read_csv("~/mimic/hosp/admissions.csv.gz"))
pryr::object_size(read_csv("~/mimic/hosp/admissions.csv.gz"))
```

Testing the speed of `fread`:

```{R}
system.time(fread("~/mimic/hosp/admissions.csv.gz"))
pryr::object_size(fread("~/mimic/hosp/admissions.csv.gz"))
```

In order of decreasing speed, read.csv() was the slowest, taking \~10 seconds, followed by read_csv(), taking \~1.8 seconds. fread() was the fastest, taking \~1.3 seconds. In order of decreasing memory usage, read.csv() was the largest, taking \~200 MB, followed by read_csv(), taking up \~70 MB. fread() took the least amount of memory at \~63.5 MB.

### Q1.2 User-supplied data types

Re-ingest `admissions.csv.gz` by indicating appropriate column data types in `read_csv`. Does the run time change? How much memory does the result tibble use? (Hint: `col_types` argument in `read_csv`.)

**Solution:**

```{R}
#Note: we can use a compact string representation where each character represents one column:
#c = character
#i = integer
#n = number
#d = double
#l = logical
#f = factor
#D = date
#T = date time
#t = time
#? = guess
#From read_csv:
#subject_id --> INTEGER NOT NULL --> integer (i)
#hadm_id --> INTEGER NOT NULL --> integer (i)
#admittime --> TIMESTAMP NOT NULL --> data time (T)
#dischtime --> TIMESTAMP --> data time (T)
#deathtime --> TIMESTAMP --> data time (T)
#admission_type --> VARCHAR(40) NOT NULL --> character (c)
#admit_provider_id --> VARCHAR(10) --> character (c)
#admission_location --> VARCHAR(60) --> character (c)
#discharge_location --> VARCHAR(60) --> character (C)
#insurance --> VARCHAR(255) --> character (C)
#language --> VARCHAR(10) --> character (C)
#marital_status --> VARCHAR(30) --> character (C)
#race --> VARCHAR(80) --> character (C)
#edregtime --> TIMESTAMP --> data time (T)
#edouttime --> TIMESTAMP --> data time (T)
#hospital_expire_flag --> SMALLINT --> integer (i)
colum_data_types <- c("i", "i", "T", "T", "T", "i", "c", "c", "c", 
                      "c", "c", "c", "c", "T", "T", "i")
system.time(read_csv("~/mimic/hosp/admissions.csv.gz", 
                     col_types = colum_data_types))
pryr::object_size(read_csv("~/mimic/hosp/admissions.csv.gz", 
                     col_types = colum_data_types))
```

When indicating the appropriate column types, the runtime increases to \~1.9 seconds, and the memory used increases to \~68 MB. \## Q2. Ingest big data files

<p align="center">

<img src="./bigfile.png" width="50%"/>

</p>

Let us focus on a bigger file, `labevents.csv.gz`, which is about 130x bigger than `admissions.csv.gz`.

```{bash}
ls -l ~/mimic/hosp/labevents.csv.gz
```

Display the first 10 lines of this file.

```{bash}
zcat < ~/mimic/hosp/labevents.csv.gz | head -10
```

### Q2.1 Ingest `labevents.csv.gz` by `read_csv`

<p align="center">

<img src="./readr_logo.png" width="20%"/>

</p>

Try to ingest `labevents.csv.gz` using `read_csv`. What happens? If it takes more than 3 minutes on your computer, then abort the program and report your findings.

**Solution:**

```{R}
#| eval: false
system.time(read_csv("~/mimic/hosp/labevents.csv.gz"))
pryr::object_size(read_csv("~/mimic/hosp/labevents.csv.gz"))
```

When trying to use `read_csv` to ingest `labevents.csv.gz`, my computer crashes.

### Q2.2 Ingest selected columns of `labevents.csv.gz` by `read_csv`

Try to ingest only columns `subject_id`, `itemid`, `charttime`, and `valuenum` in `labevents.csv.gz` using `read_csv`. Does this solve the ingestion issue? (Hint: `col_select` argument in `read_csv`.)

**Solution:**

```{R}
#| eval: false
column_subset <- c("subject_id", "itemid", "charttime", "valuenum")
system.time(read_csv("~/mimic/hosp/labevents.csv.gz", 
                     col_select = column_subset))
pryr::object_size(read_csv("~/mimic/hosp/labevents.csv.gz", 
                     col_select = column_subset))
```

When trying to use `read_csv` to ingest only columns `subject_id`, `itemid`, `charttime`, and `valuenum` in `labevents.csv.gz`, my computer crashes still crashes, despite reading only a subset.

### Q2.3 Ingest a subset of `labevents.csv.gz`

<p align="center">

<img src="./linux_logo.png" width="20%"/>

</p>

Our first strategy to handle this big data file is to make a subset of the `labevents` data. Read the [MIMIC documentation](https://mimic.mit.edu/docs/iv/modules/hosp/labevents/) for the content in data file `labevents.csv`.

In later exercises, we will only be interested in the following lab items: creatinine (50912), potassium (50971), sodium (50983), chloride (50902), bicarbonate (50882), hematocrit (51221), white blood cell count (51301), and glucose (50931) and the following columns: `subject_id`, `itemid`, `charttime`, `valuenum`. Write a Bash command to extract these columns and rows from `labevents.csv.gz` and save the result to a new file `labevents_filtered.csv.gz` in the current working directory. (Hint: Use `zcat <` to pipe the output of `labevents.csv.gz` to `awk` and then to `gzip` to compress the output. Do **not** put `labevents_filtered.csv.gz` in Git! To save render time, you can put `#| eval: false` at the beginning of this code chunk. TA will change it to `#| eval: true` before rendering your qmd file.)

Display the first 10 lines of the new file `labevents_filtered.csv.gz`. How many lines are in this new file, excluding the header? How long does it take `read_csv` to ingest `labevents_filtered.csv.gz`?

**Solution:**

```{bash}
#| eval: false

#We use awk to select our columns of interest.
#`subject_id`, `itemid`, `charttime`, `valuenum` are columns 2, 5, 7, and 10 respectively
#and to select values of the following lab items: creatinine (50912), potassium (50971), sodium (50983), chloride (50902), bicarbonate (50882), hematocrit (51221), white blood cell count (51301), and glucose (50931) using itemid, column 5.

#Note: We use NR == 1 to skip the logic in the first line, since we want to keep the headers to read later on.
zcat < ~/mimic/hosp/labevents.csv.gz | 
awk -F ',' 'NR == 1 || $5 ~ /50912|50971|50983|50902|50882|51221|51301|50931/ \
{print $2 "," $5 "," $7 "," $10}' |  gzip > ~/labevents_filtered.csv.gz

```

```{bash}
echo 'The first ten lines in labevents_filtered.csv.gz are:'
zcat < ~/labevents_filtered.csv.gz | head -n 10

#To count the rows without the header, we pipe tail -n +2
echo 'The line number, minus the header, in labevents_filtered.csv.gz is:'
zcat < ~/labevents_filtered.csv.gz | tail -n +2 |wc -l
```

```{R}
system.time(fread("~/labevents_filtered.csv.gz"))
pryr::object_size(fread("~/labevents_filtered.csv.gz"))
```

The number of lines in `labevents_filtered.csv`, minus the header, is 32679896 Reading the filtered dataset takes \~9 seconds and \~784 MB of memory.

### Q2.4 Ingest `labevents.csv` by Apache Arrow

<p align="center">

<img src="./arrow_logo.png" width="30%"/>

</p>

Our second strategy is to use [Apache Arrow](https://arrow.apache.org/) for larger-than-memory data analytics. Unfortunately Arrow does not work with gz files directly. First decompress `labevents.csv.gz` to `labevents.csv` and put it in the current working directory (do not add it in git!). To save render time, put `#| eval: false` at the beginning of this code chunk. TA will change it to `#| eval: true` when rendering your qmd file.

Then use [`arrow::open_dataset`](https://arrow.apache.org/docs/r/reference/open_dataset.html) to ingest `labevents.csv`, select columns, and filter `itemid` as in Q2.3. How long does the ingest+select+filter process take? Display the number of rows and the first 10 rows of the result tibble, and make sure they match those in Q2.3. (Hint: use `dplyr` verbs for selecting columns and filtering rows.)

Write a few sentences to explain what is Apache Arrow. Imagine you want to explain it to a layman in an elevator.

**Solution:**

```{bash}
#| eval: false
#We first unzip labevents.csv.gz  
gzip -dk ~/mimic/hosp/labevents.csv.gz 
```

```{R}
subset_columns <- c("subject_id", "itemid", "charttime", "valuenum")
subset_itemid <-c(50912, 50971, 50983, 50902, 
                   50882, 51221, 51301, 50931)

system.time(
  arrow::open_dataset("~/mimic/hosp/labevents.csv", format = "csv") %>%
  select(all_of(subset_columns)) %>%
  filter(itemid %in% subset_itemid) %>%
  collect()
  )

df <- arrow::open_dataset("~/mimic/hosp/labevents.csv", format = "csv") %>%
  select(all_of(subset_columns)) %>%
  filter(itemid %in% subset_itemid) %>%
  collect()

nrow(df)
head(df, 10)
```

It takes \~3 minutes for the ingestion + selecting + filtering of labevents.csv

Apache Arrow is a software development platform built for high-performance applications involved in transporting and processing large data sets. Its in-memory columnar format holds language-independent specifications to structure table-like datasetsets. Apache Arrow has libraries implemented in various languages, including C, C++, Java, MATLAB, Python, R, and Julia.

### Q2.5 Compress `labevents.csv` to Parquet format and ingest/select/filter

<p align="center">

<img src="./parquet_logo.png" width="30%"/>

</p>

Re-write the csv file `labevents.csv` in the binary Parquet format (Hint: [`arrow::write_dataset`](https://arrow.apache.org/docs/r/reference/write_dataset.html).) How large is the Parquet file(s)? How long does the ingest+select+filter process of the Parquet file(s) take? Display the number of rows and the first 10 rows of the result tibble and make sure they match those in Q2.3. (Hint: use `dplyr` verbs for selecting columns and filtering rows.)

Write a few sentences to explain what is the Parquet format. Imagine you want to explain it to a layman in an elevator.

**Solution:**

```{R}
#Writing the Parquet file
df <- arrow::open_dataset("~/mimic/hosp/labevents.csv", format = "csv")
arrow::write_dataset(df, path = "~/", format = "parquet")
```

```{R}
#Reading the data set
system.time(
  arrow::open_dataset("~/part-0.parquet") %>%
  select(all_of(subset_columns)) %>%
  filter(itemid %in% subset_itemid) %>%
  collect()
  )


df <- arrow::open_dataset("~/part-0.parquet") %>%
  select(all_of(subset_columns)) %>%
  filter(itemid %in% subset_itemid) %>%
  collect()

nrow(df)
head(df, 10)
```

Ingesting, selecting, and filtering the Parquet file took \~8.5 seconds. The Parquet file is \~2.5 GB.

Optimized to handle flat columnar storage data formats, the Parquet open-source file format is very compatible with large-volume, complex data. Able to handle many encoding types, the Parquet file format is also known for its exemplary data compression ability. Using Google's record shredding, Parquet files can perform fast queries that select specific columns without the need to read the entire data set and perform efficient column-wise compression.

### Q2.6 DuckDB

<p align="center">

<img src="./duckdb_logo.png" width="20%"/>

</p>

Ingest the Parquet file, convert it to a DuckDB table by [`arrow::to_duckdb`](https://arrow.apache.org/docs/r/reference/to_duckdb.html), select columns, and filter rows as in Q2.5. How long does the ingest+convert+select+filter process take? Display the number of rows and the first 10 rows of the result tibble and make sure they match those in Q2.3. (Hint: use `dplyr` verbs for selecting columns and filtering rows.)

Write a few sentences to explain what is DuckDB. Imagine you want to explain it to a layman in an elevator.

**Solution:**

```{R}
system.time(arrow::open_dataset("~/part-0.parquet"))

df <- arrow::open_dataset("~/part-0.parquet")

system.time(  
  arrow::to_duckdb(df) %>%
  select(all_of(subset_columns)) %>%
  filter(itemid %in% subset_itemid) %>%
  collect()
)

df_duckdb <- arrow::to_duckdb(df) %>%
  select(all_of(subset_columns)) %>%
  filter(itemid %in% subset_itemid) %>%
  collect()

nrow(df_duckdb)
head(df_duckdb, 10)

```

**Solution:** In total, it takes \~0.3 seconds to ingest the Parquet file and an extra \~6 seconds to convert, select, and filter the duckdb file. In total, the whole process took \~6.3 seconds.

DuckDB is a portable, analytical, in-process, and open-source database system. DuckDB uses a rich SQL dialect to read and write files in many supported formats and perform lightning-fast queries using its columnar engine, which supports parallel execution. Unlike other database systems, DuckDB is easy to install and runs in-process in many different host applications, such as Rstudio.

## Q3. Ingest and filter `chartevents.csv.gz`

[`chartevents.csv.gz`](https://mimic.mit.edu/docs/iv/modules/icu/chartevents/) contains all the charted data available for a patient. During their ICU stay, the primary repository of a patient’s information is their electronic chart. The `itemid` variable indicates a single measurement type in the database. The `value` variable is the value measured for `itemid`. The first 10 lines of `chartevents.csv.gz` are

```{bash}
zcat < ~/mimic/icu/chartevents.csv.gz | head -10
```

How many rows? 433 millions.

```{bash}
#| eval: false
zcat < ~/mimic/icu/chartevents.csv.gz | tail -n +2 | wc -l
```

[`d_items.csv.gz`](https://mimic.mit.edu/docs/iv/modules/icu/d_items/) is the dictionary for the `itemid` in `chartevents.csv.gz`.

```{bash}
zcat < ~/mimic/icu/d_items.csv.gz | head -10
```

In later exercises, we are interested in the vitals for ICU patients: heart rate (220045), mean non-invasive blood pressure (220181), systolic non-invasive blood pressure (220179), body temperature in Fahrenheit (223761), and respiratory rate (220210). Retrieve a subset of `chartevents.csv.gz` only containing these items, using the favorite method you learnt in Q2.

Document the steps and show code. Display the number of rows and the first 10 rows of the result tibble.

**Solution:**

I first use Bash to create a filtered gzip, since out of all the methods in Q2, this method takes up the least amount of disk space and memory, and I am low on both on my computer.

```{bash}
#Itemid is the 7th column of chartevents.csv.gz
#We use awk to filter out rows that do not contain such columns.

zcat < ~/mimic/icu/chartevents.csv.gz | 
awk -F ',' 'NR == 1 || $7 ~ /220045|220181|220179|223761|220210/ \
{print $0}' |  gzip > ~/chartevents_filtered.csv.gz
```

We then use R to load in the data set and display the first ten lines and count the total number of lines. We use `read_csv`.

```{R}
df <- read_csv("~/chartevents_filtered.csv.gz")
nrow(df)
head(df, 10)
```

The number of rows is 30195426.

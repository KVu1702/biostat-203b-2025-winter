---
title: "Biostat 203B Homework 3"
subtitle: "Due Feb 21 @ 11:59PM"
author: "Khoa Vu 705600710"
format:
  pdf: default
  html:
    theme: cosmo
    embed-resources: true
    number-sections: false
    toc: true
    toc-depth: 4
    toc-location: left
    code-fold: false
---

Display machine information for reproducibility:

```{r}
sessionInfo()
```

Load necessary libraries (you can add more as needed).

```{r setup}
library(arrow)
library(gtsummary)
library(memuse)
library(pryr)
library(R.utils)
library(tidyverse)
```

Display your machine memory.

```{r}
memuse::Sys.meminfo()
```

In this exercise, we use tidyverse (ggplot2, dplyr, etc) to explore the [MIMIC-IV](https://physionet.org/content/mimiciv/3.1/) data introduced in [homework 1](https://ucla-biostat-203b.github.io/2025winter/hw/hw1/hw1.html) and to build a cohort of ICU stays.

## Q1. Visualizing patient trajectory

Visualizing a patient's encounters in a health care system is a common task in clinical data analysis. In this question, we will visualize a patient's ADT (admission-discharge-transfer) history and ICU vitals in the MIMIC-IV data.

### Q1.1 ADT history

A patient's ADT history records the time of admission, discharge, and transfer in the hospital. This figure shows the ADT history of the patient with `subject_id` 10001217 in the MIMIC-IV data. The x-axis is the calendar time, and the y-axis is the type of event (ADT, lab, procedure). The color of the line segment represents the care unit. The size of the line segment represents whether the care unit is an ICU/CCU. The crosses represent lab events, and the shape of the dots represents the type of procedure. The title of the figure shows the patient's demographic information and the subtitle shows top 3 diagnoses.

![](10001217_adt.png) Do a similar visualization for the patient with `subject_id` 10063848 using ggplot.

Hint: We need to pull information from data files `patients.csv.gz`, `admissions.csv.gz`, `transfers.csv.gz`, `labevents.csv.gz`, `procedures_icd.csv.gz`, `diagnoses_icd.csv.gz`, `d_icd_procedures.csv.gz`, and `d_icd_diagnoses.csv.gz`. For the big file `labevents.csv.gz`, use the Parquet format you generated in Homework 2. For reproducibility, make the Parquet folder `labevents_pq` available at the current working directory `hw3`, for example, by a symbolic link. Make your code reproducible.

**Solution:**

```{r}
#Setting the subject ID
#ID <- (10001217) #This is the exmaple subject ID
ID <- (10063848)

#Reading in labevents_pg, we only want the subject_id and charttime
labevents <- arrow::open_dataset("~/labevents_pq") %>% 
  #Filering based on subject ID
  filter(subject_id %in% ID) %>%
  #Selecting only on columns of interest
  select(all_of(c("subject_id", "charttime"))) %>%
  #Renaming charttime to Calender_Time
  rename("Calender_Time" = charttime) %>%
  collect() 
#Converting time to UTC and not PDT
labevents$Calender_Time <- as.POSIXct(labevents$Calender_Time, tz="UTC")

#Reading in procedures_icd.csv.gz and d_icd_procedures.csv.gz
procedures_icd <- read_csv("~/mimic/hosp/procedures_icd.csv.gz") %>% 
   filter(subject_id %in% ID)
d_icd_procedures <- read_csv("~/mimic/hosp/d_icd_procedures.csv.gz") 

#Left Joining procedures_icd and d_icd_procedures by icd_code to get 
#the procedure name. We only want the chartdate and long_title. 
joined_procedures <- left_join(procedures_icd, d_icd_procedures, 
                               by = "icd_code") %>% 
  select(all_of(c("chartdate", "long_title"))) %>%
  rename("Calender_Time" = chartdate) %>%
  mutate(type = "Lab") 

#Reading in transfers.csv.gz
transfers <- read_csv("~/mimic/hosp/transfers.csv.gz") %>% 
  filter(subject_id %in% ID) %>% 
  #Filtering out values where care units is UNKNOWN
  filter(careunit != "UNKNOWN") %>% 
  select(all_of(c("subject_id", "intime", "outtime", "careunit")))
#Converting time to UTC and not PDT
transfers$intime <- as.POSIXct(transfers$intime, tz="UTC")
transfers$outtime <- as.POSIXct(transfers$outtime, tz="UTC")


#Filtering transfers by ICU/CCU
transfers_ICU_CCU <- transfers %>% filter(grepl('ICU|CCU', careunit)) %>%
  mutate(ICU_CCU = "Yes")
transfers_Not_ICU_CCU <- transfers %>% filter(!(grepl('ICU|CCU', careunit))) %>%
  mutate(ICU_CCU = "No")

#Joining resulting dataframes into 1
res_df <- bind_rows(
  labevents %>% mutate(type = "Lab"),
  joined_procedures %>% mutate(type = "Procedure"),
  transfers_ICU_CCU %>% mutate(type = "ADT"),
  transfers_Not_ICU_CCU %>% mutate(type = "ADT"),
)

#Reading in admissions.csv.gz to get race information
admissions <- read_csv("~/mimic/hosp/admissions.csv.gz") %>% 
  filter(subject_id %in% ID) 
subject_race <- tolower(unique(admissions$race))

#Reading in patients.csv.gz to get gender and age information
patients <- read_csv("~/mimic/hosp/patients.csv.gz") %>% 
  filter(subject_id %in% ID) 
subject_gender <- unique(patients$gender)
subject_age <- unique(patients$anchor_age)

subject_title <- paste0("Patient ", ID, ", ", subject_gender, ", ", subject_age,
  ", years old, ", subject_race)

#Reading in and left joining diagnoses_icd.csv.gz and d_icd_diagnoses.csv.gz 
#to get the top three diagnoses for the subtitle

diagnoses_icd <- read_csv("~/mimic/hosp/diagnoses_icd.csv.gz") %>% 
  filter(subject_id %in% ID) %>% head(3)
d_icd_diagnoses <- read_csv("~/mimic/hosp/d_icd_diagnoses.csv.gz") 
joined_diagnoses <- left_join(diagnoses_icd, d_icd_diagnoses, 
  by = "icd_code") 
top_three_diagnoses <- joined_diagnoses$long_title
subject_subtitle <- paste0(top_three_diagnoses[1], "\n", 
                           top_three_diagnoses[2], "\n", 
                           top_three_diagnoses[3])

#We wrap the text for our legend
res_df <- res_df %>% 
  mutate(long_title = str_wrap(long_title, 15)) %>% 
  mutate(careunit = str_wrap(careunit, 15))

#Define line segment size
segment_size = 2

ggplot() + 
  #Plotting the ADT Data (Not ICU/CCU)
  geom_segment(data = res_df %>% filter((type == "ADT") & (ICU_CCU == "No")), 
             aes(x = intime, y = type, xend = outtime, yend = type, 
                 color = careunit), linewidth = segment_size) +
  #Plotting the ADT Data (ICU/CCU)
  geom_segment(data = res_df %>% filter((type == "ADT") & (ICU_CCU == "Yes")), 
             aes(x = intime, y = type, xend = outtime, yend = type, 
                 color = careunit), linewidth = segment_size*3) +
  #Plotting the Lab data
  geom_point(data = res_df %>% filter(type == "Lab"), 
             aes(x = Calender_Time, y = type), shape = 3, size = 5) +
  #Plotting the Procedure data
  geom_point(data = res_df %>% filter(type == "Procedure"), 
             aes(x = Calender_Time, y = type, shape = long_title), size = 5) +
  theme(
    axis.title.y = element_blank(),
    legend.position = "bottom",
    legend.box = "vertical"
  ) + 
  scale_y_discrete(limits = rev) +
  xlab("Calender Time") + 
  labs(title = subject_title,
       subtitle = subject_subtitle,
       color = "Care Unit", 
       shape = "Procedure") +
  guides(color = guide_legend(order=1),
         shape = guide_legend(order=2))

```

### Q1.2 ICU stays

ICU stays are a subset of ADT history. This figure shows the vitals of the patient `10001217` during ICU stays. The x-axis is the calendar time, and the y-axis is the value of the vital. The color of the line represents the type of vital. The facet grid shows the abbreviation of the vital and the stay ID.

![](10001217_icu.png)

Do a similar visualization for the patient `10063848`.

**Solution:**

```{r}
#Setting the subject ID
#ID <- (10001217) #This is the exmaple subject ID
ID <- (10063848)

#Reading in icustays.csv.gz
icustays <- read_csv("~/mimic/icu/icustays.csv.gz") %>% 
   filter(subject_id %in% ID)

#Reading in chartevents.csv.gz, using the Parquet generated from HW2
#We create a symoblic link to the Parquet file in chartevents_pq
#We take the measurements and columns we need: 
#heart rate (220045), diastolic non-invasive blood pressure (220180), 
#systolic non-invasive blood pressure (220179), body temperature in 
#Fahrenheit (223761), and respiratory rate (220210)

subset_itemid <-c(220045, 220180, 220179, 223761, 220210)

chartevents <- arrow::open_dataset("~/chartevents_pq") %>% 
  #Filering based on subject ID
  filter(subject_id %in% ID) %>%
  #Subset based on needed measurements
  filter(itemid %in% subset_itemid) %>%
  #Sorting our values
  arrange(itemid, charttime) %>%
  collect()
#Converting time to UTC and not PDT
chartevents$charttime <- as.POSIXct(chartevents$charttime, tz="UTC")


#We left join chartevents and icustays by stay_id to differentiate the unique
#icu stays for each measurement
joined_icu_chart <- left_join(chartevents, icustays, by = "stay_id") 

#We rename the item_id with their abbreviations by utilizing d_items.csv.gz
d_items <- read_csv("~/mimic/icu/d_items.csv.gz") 
#We left join with our chart events on itemid
joined_icu_chart_id <- left_join(joined_icu_chart, d_items, by = "itemid") 


#Creating our title
subject_title <- paste0("Patient ", ID, ", ICU stays - Vitals")

#Note, our y is value and not valuenum, we want the values to be a double
#and not a string
ggplot(joined_icu_chart_id, mapping = aes(x = charttime, y = valuenum, 
  color = abbreviation, group = abbreviation)) +
  geom_point() +
  geom_line() +
  facet_grid(abbreviation~stay_id, scales="free", space="fixed") +
  scale_x_datetime(guide = guide_axis(n.dodge = 2)) + 
  theme(
    axis.title.y = element_blank(),
    axis.title.x = element_blank(),
    legend.position = "none"
  ) + 
  labs(title = subject_title)
  
```

## Q2. ICU stays

`icustays.csv.gz` (<https://mimic.mit.edu/docs/iv/modules/icu/icustays/>) contains data about Intensive Care Units (ICU) stays. The first 10 lines are

```{bash}
zcat < ~/mimic/icu/icustays.csv.gz | head
```

### Q2.1 Ingestion

Import `icustays.csv.gz` as a tibble `icustays_tble`.

**Solution:**

```{r}
icustays_tble <- read_csv("~/mimic/icu/icustays.csv.gz")
```

### Q2.2 Summary and visualization

How many unique `subject_id`? Can a `subject_id` have multiple ICU stays? Summarize the number of ICU stays per `subject_id` by graphs.

**Solution:**

```{r}
#Printing number of ICU stays
nrow(icustays_tble)

#Printing number of unqiue subject_id
length(unique(icustays_tble$subject_id))

num_ICU_stays_per_subject_id <- icustays_tble %>% 
  #Group by subject_id
  group_by(subject_id) %>%
  #Count number of stays per subject_id
  summarise(n_stays = n()) %>%
  #Group by number of stays
  group_by(n_stays) %>%
  #Count the number of times for each number of stays
  summarise(freq_n_stays = n())

ggplot(num_ICU_stays_per_subject_id, aes(x = n_stays, 
  y = freq_n_stays)) +
  geom_bar(stat = 'identity') +
  xlab("Number of Stays") + 
  ylab("Frequency") + 
  theme(legend.position = "none") +
  labs(title = "Frequency of ICU Stays For Each Subject ID") 

```

The number of unique `subject_id` is 65366 while the total number of ICU stays is 94458, which means that there are some subjects who have multiple ICU stays.

## Q3. `admissions` data

Information of the patients admitted into hospital is available in `admissions.csv.gz`. See <https://mimic.mit.edu/docs/iv/modules/hosp/admissions/> for details of each field in this file. The first 10 lines are

```{bash}
zcat < ~/mimic/hosp/admissions.csv.gz | head
```

### Q3.1 Ingestion

Import `admissions.csv.gz` as a tibble `admissions_tble`.

**Solution:**

```{r}
admissions_tble <- read_csv("~/mimic/hosp/admissions.csv.gz")
```

### Q3.2 Summary and visualization

Summarize the following information by graphics and explain any patterns you see.

-   number of admissions per patient\
-   admission hour (anything unusual?)\
-   admission minute (anything unusual?)\
-   length of hospital stay (from admission to discharge) (anything unusual?)

**Solution:**

```{r}

#Number of admissions per patient
num_admissions_per_patient <- admissions_tble %>% 
  #Group by subject_id
  group_by(subject_id) %>%
  #Count number of admissions per patient
  summarise(n_admissions = n()) %>%
  #Group by number of admissions
  group_by(n_admissions) %>%
  #Count the number of times for each number of stays
  summarise(freq_n_admissions = n())

ggplot(num_admissions_per_patient, aes(x = n_admissions, 
  y = freq_n_admissions)) +
  geom_bar(stat = 'identity') +
  xlab("Number of Admissions") + 
  ylab("Frequency") + 
  theme(legend.position = "none") +
  labs(title = "Frequency of Admissions Per Patient") 
```

The chart demonstrates most patients have less than ten hospital admissions because most patients have their conditions treated/cured after a few hospital visits. However, we see that there exist some outliers that have more than a hundred hospital admissions. However, we do not know if this is an outlier due to a technical error or if this patient is chronically sick and requires constant hospital care.

```{r}
#Admission hour

#Adding an hour column to admissions_tble
  
admissions_tble$admission_hour <- hour(admissions_tble$admittime)

n_hour_of_admission <- admissions_tble %>% 
  #Group by admission hour
  group_by(admission_hour) %>%
  #Count number of admissions by hour
  summarise(n_admissions_hour = n()) 

ggplot(n_hour_of_admission, aes(x = admission_hour, 
  y = n_admissions_hour)) +
  geom_bar(stat = 'identity') +
  xlab("Hour of Admissions") + 
  ylab("Frequency") + 
  theme(legend.position = "none") +
  labs(title = "Frequency of Admissions By Hour") 
```

The graph demonstrates that most hospital admissions occur at around 7 a.m. or in the afternoon/nighttime from 3 p.m. to midnight. This small initial spike in admissions is likely because most people try to get hospital appointments before work/school at 8 a.m. or 9 a.m. As people get off work or school around 3 p.m., they can make it to the hospital.

```{r}
#Admission Minute

#Adding a minute column to admissions_tble
  
admissions_tble$admission_minute <- minute(admissions_tble$admittime)

n_minute_of_admission <- admissions_tble %>% 
  #Group by admission minute
  group_by(admission_minute) %>%
  #Count number of admissions by minute
  summarise(n_admissions_minute = n()) 

ggplot(n_minute_of_admission, aes(x = admission_minute, 
  y = n_admissions_minute)) +
  geom_bar(stat = 'identity') +
  xlab("Minute of Admissions") + 
  ylab("Frequency") + 
  theme(legend.position = "none") +
  labs(title = "Frequency of Admissions By Minute") 
```

This graph demonstrates that most hospital admissions occur at 15-minute intervals starting at the top of the hour. A couple of possible explanations for this pattern are that hospital appointments tend to last in intervals of 15 minutes, from half an hour to 45 minutes to one hour, and so on. This results in appointment admission times scheduled around these intervals.

```{r}
#Length of Hospital Stay

#Find the duration of the length of stay
admissions_tble$length_of_stay <- difftime(admissions_tble$dischtime, 
  admissions_tble$admittime, units="days")

ggplot(admissions_tble, aes(x = length_of_stay)) +
  geom_histogram() +
  stat_bin(bins = 30) +
  xlab("Duration of Stay (Days)") + 
  ylab("Frequency") + 
  theme(legend.position = "none") +
  labs(title = "Frequency of Duration of Stay (Days)") 

```

This graph demonstrates that the typical duration of stays at the hospital does not last more than 10 days. This pattern means most ailments are treated within that period, except for severe conditions requiring constant and longstanding treatment plans. There are some outliers in stay duration lasting over a year, though this could be an entry error or a patient with a condition that needs lengthy care, such as a coma.

According to the [MIMIC-IV documentation](https://mimic.mit.edu/docs/iv/about/concepts/#date-shifting),

> All dates in the database have been shifted to protect patient confidentiality. Dates will be internally consistent for the same patient, but randomly distributed in the future. Dates of birth which occur in the present time are not true dates of birth. Furthermore, dates of birth which occur before the year 1900 occur if the patient is older than 89. In these cases, the patient’s age at their first admission has been fixed to 300.

## Q4. `patients` data

Patient information is available in `patients.csv.gz`. See <https://mimic.mit.edu/docs/iv/modules/hosp/patients/> for details of each field in this file. The first 10 lines are

```{bash}
zcat < ~/mimic/hosp/patients.csv.gz | head
```

### Q4.1 Ingestion

Import `patients.csv.gz` (<https://mimic.mit.edu/docs/iv/modules/hosp/patients/>) as a tibble `patients_tble`.

**Solution:**

```{r}
patients_tble <- read_csv("~/mimic/hosp/patients.csv.gz")
```

### Q4.2 Summary and visualization

Summarize variables `gender` and `anchor_age` by graphics, and explain any patterns you see.

**Solution:**

```{r}
#Summarizing Gender
n_gender <- patients_tble %>% 
  #Group by gender
  group_by(gender) %>%
  #Count number of each gender
  summarise(n_gender = n()) 

ggplot(n_gender, aes(x = gender, y = n_gender, fill = gender)) +
  geom_bar(stat = 'identity') +
  xlab("Gender") + 
  ylab("Frequency") + 
  theme(legend.position = "right") +
  labs(title = "Frequency of Gender")  
```

There is not much of a pattern for patient frequencies by gender, except for a slightly higher frequency of female patients. This pattern could be the result of male patients' reluctance to go to a healthcare facility and instead opting to suck it up.

```{r}
#Summarizing anchor_age
n_anchor_age <- patients_tble %>% 
  #Group by anchor_age
  group_by(anchor_age) %>%
  #Count number of anchor_age
  summarise(n_anchor_age = n()) 

ggplot(n_anchor_age, aes(x = anchor_age, y = n_anchor_age)) +
  geom_bar(stat = 'identity') +
  xlab("Anchor Age") + 
  ylab("Frequency") + 
  theme(legend.position = "none") +
  labs(title = "Frequency of Anchor Ages") 
```

This chart demonstrates a clear spike in patients' ages around the early teens and preteens. This pattern can be explained by children being more susceptible to becoming sick or injuring themselves and cautious parents feeling the need to admit their children to be safe. There is a decline in patients from 35-45, as health problems do not appear again until patients reach around 50 years of age. As patients pass away of old age, fewer patients are admitted in the later age ranges.

## Q5. Lab results

`labevents.csv.gz` (<https://mimic.mit.edu/docs/iv/modules/hosp/labevents/>) contains all laboratory measurements for patients. The first 10 lines are

```{bash}
zcat < ~/mimic/hosp/labevents.csv.gz | head
```

`d_labitems.csv.gz` (<https://mimic.mit.edu/docs/iv/modules/hosp/d_labitems/>) is the dictionary of lab measurements.

```{bash}
zcat < ~/mimic/hosp/d_labitems.csv.gz | head
```

We are interested in the lab measurements of creatinine (50912), potassium (50971), sodium (50983), chloride (50902), bicarbonate (50882), hematocrit (51221), white blood cell count (51301), and glucose (50931). Retrieve a subset of `labevents.csv.gz` that only containing these items for the patients in `icustays_tble`. Further restrict to the last available measurement (by `storetime`) before the ICU stay. The final `labevents_tble` should have one row per ICU stay and columns for each lab measurement.

![](labevents_tble.png)

Hint: Use the Parquet format you generated in Homework 2. For reproducibility, make `labevents_pq` folder available at the current working directory `hw3`, for example, by a symbolic link.

**Solution:**

```{r}
subset_itemid <- c(50912, 50971, 50983, 50902, 50882, 51221, 51301, 50931)

#We read in d_labitems by to join with labevents_tble later to get the labels 
#for the items 

d_labitems <- read_csv("~/mimic/hosp/d_labitems.csv.gz")

labevents_tble <- arrow::open_dataset("~/labevents_pq") %>% 
  #Converting to duckdb
  arrow::to_duckdb() %>%  
  #Filtering by measurements we want to take
  filter(itemid %in% subset_itemid) %>%
  #We keep only the columns we need
  select(subject_id, itemid, storetime, valuenum) %>%
  #Mutating columns for proper joins
  #Mutate subject_id and hadm_id as double to join with icustays_tble
  mutate(subject_id = as.double(subject_id)) %>%
  #We inner join with icu stays, keeping only the patients with an icu stay
  #We inner join to discard nonmatching rows from both tibbles
  inner_join(icustays_tble, by = c("subject_id"), copy = TRUE) %>%
  filter(storetime < intime) %>%
  #We group by stay_id and itemid to get the values for each measurement
  #of each stay 
  group_by(subject_id, stay_id, itemid) %>%
  #We order by the store time, taking the last measurement before intime
  #Using slice_max(), we take a slice of size one for the highest time
  slice_max(order_by = storetime, n = 1) %>%
  summarize(valuenum = mean(valuenum, na.rm = TRUE)) %>%
  #We ungroup to get the dataframe back to a normal size
  ungroup() %>%
  #We join labevents_tble with d_labitems by itemid
  left_join(d_labitems, by = "itemid", copy = TRUE) %>% 
  #We subset labevents_tbl to only the columns we need in our final result
  select(c(subject_id, stay_id, valuenum, label)) %>%
  #Apply lower case to all labels
  mutate(label = tolower(label)) %>%
  #We widen the dataframe to get each row as a subject and ICU stay
  pivot_wider(names_from = label, values_from = valuenum) %>%
  #Sorting the tble by subject_id and_stay id for grading purposes
  arrange(subject_id, stay_id) %>%
  #Changing white blood cells to wbc, removing spaces
  rename(wbc = `white blood cells`) %>%
  collect()

labevents_tble

#Clearing up memory for next step
gc()
```

## Q6. Vitals from charted events

`chartevents.csv.gz` (<https://mimic.mit.edu/docs/iv/modules/icu/chartevents/>) contains all the charted data available for a patient. During their ICU stay, the primary repository of a patient’s information is their electronic chart. The `itemid` variable indicates a single measurement type in the database. The `value` variable is the value measured for `itemid`. The first 10 lines of `chartevents.csv.gz` are

```{bash}
zcat < ~/mimic/icu/chartevents.csv.gz | head
```

`d_items.csv.gz` (<https://mimic.mit.edu/docs/iv/modules/icu/d_items/>) is the dictionary for the `itemid` in `chartevents.csv.gz`.

```{bash}
zcat < ~/mimic/icu/d_items.csv.gz | head
```

We are interested in the vitals for ICU patients: heart rate (220045), systolic non-invasive blood pressure (220179), diastolic non-invasive blood pressure (220180), body temperature in Fahrenheit (223761), and respiratory rate (220210). Retrieve a subset of `chartevents.csv.gz` only containing these items for the patients in `icustays_tble`. Further restrict to the first vital measurement within the ICU stay. The final `chartevents_tble` should have one row per ICU stay and columns for each vital measurement.

![](chartevents_tble.png)

Hint: Use the Parquet format you generated in Homework 2. For reproducibility, make `chartevents_pq` folder available at the current working directory, for example, by a symbolic link.

**Solution:**

```{r}
subset_itemid <-c(220045, 220180, 220179, 223761, 220210)

#We read in d_items to join with chartevents_tble and get the labels 
#for the items later
d_items <- read_csv("~/mimic/icu/d_items.csv.gz")

chartevents_tble <- arrow::open_dataset("~/chartevents_pq") %>% 
  #Converting to duckdb
  arrow::to_duckdb() %>%  
  #Subset based on needed measurements
  filter(itemid %in% subset_itemid) %>%
  #We keep only the columns we need
  select(subject_id, stay_id, itemid, storetime, valuenum) %>%
  #Mutate subject_id and stay_id as double to join with icustays_tble
  mutate(subject_id = as.double(subject_id)) %>%
  mutate(stay_id = as.double(stay_id)) %>%
  #Inner join with ICU Stays
  #Keep patients with an ICU stay
  inner_join(icustays_tble, by = c("subject_id", "stay_id"), copy = TRUE) %>%
  #Filter by measurements within the ICU stay
  filter((storetime > intime) & (storetime < outtime)) %>% 
  #We group by stay_id and itemid to get the values for each measurement
  #of each stay 
  group_by(subject_id, stay_id, itemid) %>%
  #We order by the store time, taking the first measurement during the ICU stay
  #Using slice_min(), we take a slice of size one for the smallest time in that
  #interval
  slice_min(order_by = storetime, n = 1) %>%
  summarize(valuenum = mean(valuenum, na.rm = TRUE)) %>%
  #We ungroup to get the dataframe back to a normal size
  ungroup() %>%
  left_join(d_items, by = "itemid", copy = TRUE) %>%
  select(c(subject_id, stay_id, valuenum, label)) %>%
  #Apply lower case to all labels and remove sapce
  mutate(label = str_replace_all(tolower(label), " ", "_")) %>%
  #We widen the dataframe to get each row as a subject and ICU stay
  pivot_wider(names_from = label, values_from = valuenum) %>%
  #Sorting the tble by subject_id and_stay id for grading purposes
  arrange(subject_id, stay_id) %>%
  collect()

chartevents_tble
  
#Clearing up memory for next step
gc()
```

## Q7. Putting things together

Let us create a tibble `mimic_icu_cohort` for all ICU stays, where rows are all ICU stays of adults (age at `intime` \>= 18) and columns contain at least following variables

-   all variables in `icustays_tble`\
-   all variables in `admissions_tble`\
-   all variables in `patients_tble`
-   the last lab measurements before the ICU stay in `labevents_tble`
-   the first vital measurements during the ICU stay in `chartevents_tble`

The final `mimic_icu_cohort` should have one row per ICU stay and columns for each variable.

![](mimic_icu_cohort.png)

**Solution:**

```{r}

mimic_icu_cohort <- icustays_tble %>% 
  #Left join with admissions_tble by subject_id and hadm_id
  left_join(admissions_tble, by = c("subject_id", "hadm_id")) %>%
  #Left join with patients_tbl by subject_id
  left_join(patients_tble, by = c("subject_id")) %>%
  #Left join with labevents_tble by subject_id and stay_id
  left_join(labevents_tble, by = c("subject_id", "stay_id")) %>%
  #Left join with chartevents_tble by subject_id and stay_id
  left_join(chartevents_tble, by = c("subject_id", "stay_id")) %>%
  #Filter by adults (anchor age >= 18)
  filter(anchor_age >= 18) %>%
  #Sorting the tble by subject_id and_stay id for grading purposes
  arrange(subject_id, stay_id) 

mimic_icu_cohort

```

## Q8. Exploratory data analysis (EDA)

Summarize the following information about the ICU stay cohort `mimic_icu_cohort` using appropriate numerics or graphs:

-   Length of ICU stay `los` vs demographic variables (race, insurance, marital_status, gender, age at intime)

-   Length of ICU stay `los` vs the last available lab measurements before ICU stay

-   Length of ICU stay `los` vs the first vital measurements within the ICU stay

-   Length of ICU stay `los` vs first ICU unit

**Solution:**

```{r}
#For each demographic, we group by the demographic and take the mean of the 
#length of stay.

#Race
los_vs_demo_race <- mimic_icu_cohort %>%
  group_by(race) %>%
  summarize(average_length_of_stay = mean(los, na.rm = TRUE)) %>%
  arrange(average_length_of_stay) 

ggplot(los_vs_demo_race, mapping = aes(x = race, y = average_length_of_stay, 
  fill = race)) +
  geom_bar(stat = "identity") + 
  #Rotating the x-axis
  theme(axis.text.x = element_text(size = 6, angle = 90, vjust = 0.5, hjust=1),
        legend.position="none") +
  ylab("Average Length of Stay (Days)") +
  xlab("Race") +
  ggtitle("Average LOS vs. Race")
```

This chart demonstrates that South American and Hispanic/Latino patients tend to stay the least amount of time in the ICU. While any explanation behind this pattern is a hypothesis, some possible explanations can be fear of medical bills or distrust of the medical systems. Unknown and unable to obtain races have the highest average length of stay. The higher average length of stay could result from patients in a very critical condition where they cannot provide this information.

```{r}
#Insurance
los_vs_demo_insurance <- mimic_icu_cohort %>%
  group_by(insurance) %>%
  summarize(average_length_of_stay = mean(los, na.rm = TRUE)) %>%
  arrange(average_length_of_stay) 

ggplot(los_vs_demo_insurance, mapping = aes(x = insurance, 
  y = average_length_of_stay, fill = insurance)) +
  geom_bar(stat = "identity") + 
  #Rotating the x-axis
  theme(axis.text.x = element_text(angle = 45, vjust = 0.5, hjust=1),
        legend.position="none") +
  ylab("Average Length of Stay (Days)") +
  xlab("Insurance") +
  ggtitle("Average LOS vs. Insurance")
```

There is not much of a pattern of the average length of ICU stay depending on the type of medical insurance. Patients with no (N/A) insurance tend to stay slightly less than those covered by insurance. This pattern is likely due to patients without insurance being more cost-conscious about their stay.

```{r}
#Gender
los_vs_demo_gender <- mimic_icu_cohort %>%
  group_by(gender) %>%
  summarize(average_length_of_stay = mean(los, na.rm = TRUE)) %>%
  arrange(average_length_of_stay) 

ggplot(los_vs_demo_gender, mapping = aes(x = gender, 
  y = average_length_of_stay, fill = gender)) +
  geom_bar(stat = "identity") +
  labs(fill = "Gender") +
  ylab("Average Length of Stay (Days)") +
  xlab("Gender") +
  ggtitle("Average LOS vs. Gender")
```

There is not a large difference/noticeable pattern in the average length of ICU stay between males and females. The small difference could be the result of sampling.

```{r}
#Age at intime
los_vs_demo_age_at_intime <- mimic_icu_cohort %>%
  group_by(anchor_age) %>%
  summarize(average_length_of_stay = mean(los, na.rm = TRUE))

ggplot(los_vs_demo_age_at_intime, mapping = aes(x = anchor_age, 
  y = average_length_of_stay, fill = anchor_age)) +
  geom_bar(stat = "identity") +
  labs(fill = "Age") +
  ylab("Average Length of Stay (Days)") +
  xlab("Age") +
  ggtitle("Average LOS vs. Anchor Age")
```

The average stay length is consistent throughout the ages except for the early teens and later in life. ICU patients in their early teens could have a faster recovery time due to their youth, and ICU patients later in life could not have much life left in them, leading to shorter ICU times before they pass away.


```{r}
#Create a list of measurements taken before ICU Stay
#creatinine, potassium, sodium, chloride, bicarbonate, hematocrit, 
#white blood cell count, glucose (50931)
measure_name_before_ICU_stay = c('creatinine', 'potassium', 'sodium',
  'chloride', 'bicarbonate', 'hematocrit', 'wbc', 'glucose')

for (measurement in measure_name_before_ICU_stay) {
    label_title = str_to_title(str_replace_all(measurement, "_", " "))
    print(ggplot(mimic_icu_cohort, aes(x = los, 
      y = mimic_icu_cohort[[measurement]])) + 
      geom_point() +
    xlab("Length of Stay (Days)") +
    ylab(label_title) +
    ggtitle(str_glue("Average LOS vs. {label_title}"))
      ) 
}
```

These charts demonstrate some patients have abnormally low or high last measurements before their ICU stay. This pattern could result from a measurement spike that needed short, critical care to restabilize them. For patients with longer stays, the measurements appear more stable. This stability must mean that patients with lengthier stays have a condition unrelated to these measurements.

```{r}
#Create a list of measurements taken after ICU Stay
#heart rate, systolic non-invasive blood pressure, diastolic non-invasive blood 
#pressure, body temperature in Fahrenheit, and respiratory rate 
measure_name_after_ICU_stay = c('heart_rate', 
                                'non_invasive_blood_pressure_systolic', 
                                'non_invasive_blood_pressure_diastolic',
                                'respiratory_rate',
                                'temperature_fahrenheit'
                                )
for (measurement in measure_name_after_ICU_stay) {
    label_title = str_to_title(str_replace_all(measurement, "_", " "))
    print(ggplot(mimic_icu_cohort, aes(x = los, 
      y = mimic_icu_cohort[[measurement]])) + 
      geom_point() +
    xlab("Length of Stay (Days)") +
    ylab(label_title) + 
    ggtitle(str_glue("Average LOS vs. {label_title}"))
      ) 
}
```

These charts demonstrate strange outliers in the first measurements taken during patient ICU stays. For example, a heart rate exceeding 750 or blood pressure exceeding the 10000's should not be possible. These outliers could result from the chaos of the ICU and healthcare professionals mistakenly inputting in patient measurements.

```{r}
#First ICU Unit
#We group by the first ICU Unit and take the mean of the length of stay.
los_vs_demo_first_ICU <- mimic_icu_cohort %>%
  group_by(first_careunit) %>%
  summarize(average_length_of_stay = mean(los, na.rm = TRUE)) %>%
  arrange(average_length_of_stay) 

ggplot(los_vs_demo_first_ICU, mapping = aes(x = first_careunit, 
  y = average_length_of_stay, fill = first_careunit)) +
  geom_bar(stat = "identity") + 
  #Rotating the x-axis
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),
        legend.position="none") +
  ylab("Average Length of Stay (Days)") +
  xlab("Care Unit") + 
  ggtitle("Average LOS vs. Care Unit")
```

This pattern demonstrates evident differences in average stay lengths depending on the care unit. This pattern results from different conditions requiring different lengths of treatment plans from their respective care units. For example, surgery care units require lengthier stay lengths for recovery times.
